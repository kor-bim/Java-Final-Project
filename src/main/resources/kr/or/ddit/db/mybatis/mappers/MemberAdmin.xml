<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.hr.member.dao.MemberAdminDAO">
	
	<resultMap type="kr.or.ddit.hr.member.vo.MemberVO" id="memberMap" autoMapping="true">
		<id property="memId" column="MEM_ID"/>
		<collection property="roleInfoList" javaType="java.util.List" ofType="kr.or.ddit.hr.member.vo.RoleInfoVO" autoMapping="true">
			<result property="roleCode" column="ROLE_CODE"/>
		</collection>
	</resultMap>
	<select id="selectNoPagingMemberList" resultMap="memberMap">
		SELECT *
		FROM V_MEMBER 
	</select>

	<select id="selectSuperAdminList" resultMap="memberMap">
		SELECT *
		FROM
		v_member
		WHERE
		ROLE_CODE = 'ROLE_ADMIN'
	</select>
	
	<select id="selectHrAdminList" resultMap="memberMap">
		SELECT *
		FROM
		v_member
		WHERE
		ROLE_CODE = 'ROLE_HRADMIN'
	</select>
	
	<select id="selectEaAdminList" resultMap="memberMap">
		SELECT *
		FROM
		v_member
		WHERE
		ROLE_CODE = 'ROLE_EAADMIN'
	</select>
	
	<select id="selectCmAdminList" resultMap="memberMap">
		SELECT *
		FROM
		v_member
		WHERE
		ROLE_CODE = 'ROLE_CMADMIN'
	</select>
	
	<update id="updateSuperToUser" parameterType="String">
		UPDATE ROLE_INFO SET
			ROLE_CODE = 'ROLE_USER'
		WHERE ROLE_CODE = 'ROLE_ADMIN'
			AND MEM_ID = #{memId}
	</update>
	
	<update id="updateCmToUser" parameterType="String">
		UPDATE ROLE_INFO SET
			ROLE_CODE = 'ROLE_USER'
		WHERE ROLE_CODE = 'ROLE_CMADMIN'
			AND MEM_ID = #{memId}
	</update>
	
	<update id="updateEaToUser" parameterType="String">
		UPDATE ROLE_INFO SET
			ROLE_CODE = 'ROLE_USER'
		WHERE ROLE_CODE = 'ROLE_EAADMIN'
			AND MEM_ID = #{memId}
	</update>
	
	<update id="updateHrToUser" parameterType="String">
		UPDATE ROLE_INFO SET
			ROLE_CODE = 'ROLE_USER'
		WHERE ROLE_CODE = 'ROLE_HRADMIN'
			AND MEM_ID = #{memId}
	</update>
	
	<insert id="updateSuperAdmin" parameterType="String"> 
		MERGE INTO ROLE_INFO RI
		    USING DUAL
		       ON(RI.ROLE_CODE IN( 'ROLE_USER' , 'ROLE_ADMIN' )
		            AND RI.MEM_ID = #{memId})            
		    WHEN MATCHED THEN
		       UPDATE SET RI.ROLE_CODE = 'ROLE_ADMIN' 
		        WHERE RI.ROLE_CODE = 'ROLE_USER'
		        
		     WHEN NOT MATCHED THEN           
		         INSERT (
		            RI_NO
		            , RI.ROLE_CODE
		            , RI.MEM_ID
		        )            
		        VALUES (
		            (SELECT MAX(ROLE_INFO.RI_NO) FROM ROLE_INFO)+1
		            , 'ROLE_ADMIN'
		            , #{memId}
		        )
	</insert>
	
	<insert id="updateCmAdmin" parameterType="String"> 
		MERGE INTO ROLE_INFO RI
		    USING DUAL
		       ON(RI.ROLE_CODE IN( 'ROLE_USER' , 'ROLE_CMADMIN' )
		            AND RI.MEM_ID = #{memId})            
		    WHEN MATCHED THEN
		       UPDATE SET RI.ROLE_CODE = 'ROLE_CMADMIN' 
		        WHERE RI.ROLE_CODE = 'ROLE_USER'
		        
		     WHEN NOT MATCHED THEN           
		         INSERT (
		            RI_NO
		            , RI.ROLE_CODE
		            , RI.MEM_ID
		        )            
		        VALUES (
		            (SELECT MAX(ROLE_INFO.RI_NO) FROM ROLE_INFO)+1
		            , 'ROLE_CMADMIN'
		            , #{memId}
		        )
	</insert>
	
	<insert id="updateEaAdmin" parameterType="String"> 
		MERGE INTO ROLE_INFO RI
		    USING DUAL
		       ON(RI.ROLE_CODE IN( 'ROLE_USER' , 'ROLE_EAADMIN' )
		            AND RI.MEM_ID = #{memId})            
		    WHEN MATCHED THEN
		       UPDATE SET RI.ROLE_CODE = 'ROLE_EAADMIN' 
		        WHERE RI.ROLE_CODE = 'ROLE_USER'
		        
		     WHEN NOT MATCHED THEN           
		         INSERT (
		            RI_NO
		            , RI.ROLE_CODE
		            , RI.MEM_ID
		        )            
		        VALUES (
		            (SELECT MAX(ROLE_INFO.RI_NO) FROM ROLE_INFO)+1
		            , 'ROLE_EAADMIN'
		            , #{memId}
		        )
	</insert>
	
	<insert id="updateHrAdmin" parameterType="String"> 
		MERGE INTO ROLE_INFO RI
		    USING DUAL
		       ON(RI.ROLE_CODE IN( 'ROLE_USER' , 'ROLE_HRADMIN' )
		            AND RI.MEM_ID = #{memId})            
		    WHEN MATCHED THEN
		       UPDATE SET RI.ROLE_CODE = 'ROLE_HRADMIN' 
		        WHERE RI.ROLE_CODE = 'ROLE_USER'
		        
		     WHEN NOT MATCHED THEN           
		         INSERT (
		            RI_NO
		            , RI.ROLE_CODE
		            , RI.MEM_ID
		        )            
		        VALUES (
		            (SELECT MAX(ROLE_INFO.RI_NO) FROM ROLE_INFO)+1
		            , 'ROLE_HRADMIN'
		            , #{memId}
		        )
	</insert>


</mapper>